# -*- coding: utf-8 -*-
"""Mobile_Prizing_classification_using_ml

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K1RLxy-Ama-hC-NsMCih1KuVZgRmlWkX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

data=pd.read_csv('mobile_price_range_data.csv')
print(data.head(10))

data.head()

data.shape

data.info()

data.isnull().sum()

#defining x and y
x=data.drop('price_range',axis=1)
y=data['price_range']

x

#splitting data into training and testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

x_train

x_test

"""LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)

a=lr.predict(x_test)
print(a)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
a1=accuracy_score(y_test,a)
print('Accuracy_Score:',a1)
print('Confusion_Matrix:',confusion_matrix(y_test,a))
print('classsification_report:',classification_report(y_test,a))

"""KNN CLASSIFFICATION"""

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train,y_train)

a2=knn.predict(x_test)
print(a2)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
a3=accuracy_score(y_test,a2)
print('Accuracy_Score:',a3)
print('Confusion_Matrix:',confusion_matrix(y_test,a2))
print('Classification_report:',classification_report(y_test,a2))

"""SVM CLASSIFIER WITH LINEAR KERNEL

"""

from sklearn.svm import SVC
svm=SVC(kernel='linear')
svm.fit(x_train,y_train)

a4=svm.predict(x_test)
print(a4)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
a5=accuracy_score(y_test,a4)
print('Accuracy_Score:',a5)
print('Confusion_Matrix:',confusion_matrix(y_test,a4))
print('Classification_report:',classification_report(y_test,a4))

"""SVM CLASSIFIER WITH RBF KERNEL

"""

from sklearn.svm import SVC
svm=SVC(kernel='rbf')
svm.fit(x_train,y_train)

a6=svm.predict(x_test)
print(a6)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
a7=accuracy_score(y_test,a6)
print('Accuracy_Score:',a7)
print('Confusion_Matrix:',confusion_matrix(y_test,a6))
print('Classification_report:',classification_report(y_test,a6))

"""DECISION TREE CLASSIFIER"""

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(x_train,y_train)

a8=dt.predict(x_test)
print(a8)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
a9=accuracy_score(y_test,a9)
print('Accuracy_Score:',a9)
print('Confusion_Matrix:',confusion_matrix(y_test,a8))
print('Classification_report:',classification_report(y_test,a8))

"""RANDOM FOREST CLASSIFIER"""

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier()
rf.fit(x_train,y_train)

a9=rf.predict(x_test)
print(a9)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
a10=accuracy_score(y_test,a9)
print('Accuracy_Score:',a10)
print('Confusion_Matrix:',confusion_matrix(y_test,a9))
print('Classification_report:',classification_report(y_test,a9))

"""CHECKING THE BEST ACCURACY (ALGORITHM)"""

import matplotlib.pyplot as plt

accuracies = [a1, a3, a5, a7, a9, a10]
algorithms = ['Logistic Regression', 'KNN', 'SVM(Linear)', 'SVM(RBF)', 'Decision Tree', 'Random Forest']

plt.bar(algorithms, accuracies, color='skyblue')
plt.xlabel('Algorithm')
plt.ylabel('Accuracy')
plt.title('Model Accuracy Comparison')
plt.ylim(0.0, 1.05)

for i, acc in enumerate(accuracies):
    plt.text(i, acc + 0.01, f"{acc:.3f}", ha='center', va='bottom', fontsize=9, fontweight='bold')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print('The model with the best accuracy:Logistic Regression')